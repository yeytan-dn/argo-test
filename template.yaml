apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: device-api-notification-uuid
  namespace: default
spec:
  args:
    - name: step-name
    - name: template-version
      value: '1.0.0'
    - name: device-list
      # Expects comma-separated UUID list like: "uuid1,uuid2,uuid3"
    - name: api-endpoint
      value: 'https://discerning-surprise-production.up.railway.app/api/v1/start-config-update-on-devices'
  metrics:
    - name: device-notification-uuid
      # interval: 5s
      count: 0 # Run exactly once per step
      successCondition: status.succeeded > 0
      failureCondition: status.failed > 0
      failureLimit: 0 # Fail immediately on any failure
      provider:
        job:
          spec:
            backoffLimit: 0
            template:
              spec:
                restartPolicy: Never
                containers:
                  - name: api-notifier
                    image: curlimages/curl:8.1.0
                    command: ['/bin/sh']
                    args:
                      - -c
                      - |
                        # Parse device UUIDs from the parameter
                        DEVICE_LIST_PARAM="{{args.device-list}}"

                        # Check if device list is provided
                        if [ -z "$DEVICE_LIST_PARAM" ] || [ "$DEVICE_LIST_PARAM" = "null" ]; then
                          echo "ERROR: No device list provided. Use device-list parameter with comma-separated UUIDs."
                          exit 1
                        fi

                        # Convert comma-separated UUIDs to JSON array format
                        DEVICE_JSON_ARRAY=""

                        # Use portable sh-compatible approach
                        echo "$DEVICE_LIST_PARAM" | tr ',' '\n' | while read DEVICE_UUID; do
                          # Trim whitespace
                          DEVICE_UUID=$(echo "$DEVICE_UUID" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                          
                          # Skip empty lines
                          if [ -z "$DEVICE_UUID" ]; then
                            continue
                          fi
                          
                          # Validate UUID format (basic check)
                          if ! echo "$DEVICE_UUID" | grep -qE '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'; then
                            echo "WARNING: '$DEVICE_UUID' doesn't look like a valid UUID format"
                          fi
                          
                          if [ -z "$DEVICE_JSON_ARRAY" ]; then
                            DEVICE_JSON_ARRAY="\"$DEVICE_UUID\""
                          else
                            DEVICE_JSON_ARRAY="$DEVICE_JSON_ARRAY,\"$DEVICE_UUID\""
                          fi
                        done

                        # Handle the subshell issue by rebuilding the array
                        DEVICE_JSON_ARRAY=""
                        for DEVICE_UUID in $(echo "$DEVICE_LIST_PARAM" | tr ',' ' '); do
                          # Trim whitespace
                          DEVICE_UUID=$(echo "$DEVICE_UUID" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                          
                          if [ -z "$DEVICE_JSON_ARRAY" ]; then
                            DEVICE_JSON_ARRAY="\"$DEVICE_UUID\""
                          else
                            DEVICE_JSON_ARRAY="$DEVICE_JSON_ARRAY,\"$DEVICE_UUID\""
                          fi
                        done

                        # Count devices
                        DEVICE_COUNT=$(echo "$DEVICE_LIST_PARAM" | tr ',' '\n' | wc -l)

                        # Create JSON payload in the exact format required
                        JSON_PAYLOAD="{\"devices\":[$DEVICE_JSON_ARRAY]}"

                        echo "Sending notification for step {{args.step-name}} with $DEVICE_COUNT devices..."
                        echo "Device UUIDs: $DEVICE_LIST_PARAM"
                        echo "JSON Payload: $JSON_PAYLOAD"

                        # Make API call exactly as specified
                        RESPONSE=$(curl -s -w "%{http_code}" --location \
                          -H "Content-Type: application/json" \
                          -d "$JSON_PAYLOAD" \
                          {{args.api-endpoint}})

                        HTTP_CODE="${RESPONSE: -3}"
                        RESPONSE_BODY="${RESPONSE%???}"

                        echo "HTTP Status: $HTTP_CODE"
                        echo "Response: $RESPONSE_BODY"

                        echo "Template Version: {{args.template-version}}"
                        if [ "$TEMPLATE_VERSION" == "3.0.0" ]; then
                          echo "failed"
                          exit 1
                        fi

                        # Check if request was successful
                        if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
                          echo "success"
                          exit 0
                        else
                          echo "API call failed with status $HTTP_CODE"
                          exit 1
                        fi
                    env:
                      - name: STEP_NAME
                        value: '{{args.step-name}}'
                      - name: DEVICE_LIST
                        value: '{{args.device-list}}'
                      - name: TEMPLATE_VERSION
                        value: '{{args.template-version}}'
                    resources:
                      requests:
                        memory: '32Mi'
                        cpu: '50m'
                      limits:
                        memory: '128Mi'
                        cpu: '200m'
